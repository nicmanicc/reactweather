{"version":3,"sources":["components/weather/weatherIcon.js","components/weather/weather.js","components/weather/weatherInfo.js","assets/ReactWeatherIcon.png","App.js","index.js"],"names":["sunnyConditions","drizzleConditions","snowConditions","sleetConditions","fogConditions","hailConditions","rainyConditions","dustyConditions","lightningConditions","WeatherIcon","props","condition","conditions","split","toLowerCase","imgSize","imgColor","includes","size","color","monthList","Weather","dateTime","Date","date","getDate","month","getMonth","fadeInCard","animationName","animationDelay","delay","animationDuration","animationFillMode","myRef","useRef","toggleItem","index","focused","ref","style","className","onClick","handleSetToggledItem","current","scrollIntoView","temp","tempMin","tempMax","WeatherInfo","array","hours","filter","i","j","ResponsiveContainer","width","height","LineChart","data","Line","name","type","dataKey","stroke","CartesianGrid","XAxis","YAxis","Tooltip","content","active","payload","label","length","value","Legend","verticalAlign","require","config","App","useState","inputClass","setInputClass","logoClass","setLogoClass","error","setError","weatherData","setWeatherData","toggledItem","setToggledItem","map","weather","datetime","tempmax","tempmin","src","Logo","alt","onSubmit","e","preventDefault","axios","get","target","country","process","then","res","days","catch","response","console","log","status","headers","setTimeout","request","message","id","autoFocus","autoComplete","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f66275b3.chunk.js","sourcesContent":["import * as icons from \"weather-icons-react\";\r\n\r\n    //Split conditions received from API into lists so that appropriate icons\r\n    //can be used for similar weather coniditions\r\n    const sunnyConditions = ['clear'];\r\n    const drizzleConditions = ['drizzle', 'heavy drizzle', 'light drizzle', 'heavy drizzle/rain', 'light drizzle/rain',\r\n     'freezing drizzle/freezing rain', 'heavy freezing drizzle/freezing rain', 'light freezing drizzle/freezing rain'];\r\n    const snowConditions = ['blowing or drifting snow', 'snow', 'snow showers', 'heavy snow', 'light snow'];\r\n    const sleetConditions = ['heavy rain and snow', 'light rain and snow', 'snow and rain showers'];\r\n    const fogConditions = ['fog', 'freezing fog'];\r\n    const hailConditions = ['hail', 'hail showers'];\r\n    const rainyConditions = ['rain', 'rain showers', 'heavy rain', 'light rain', 'precipitation in vicinity', \r\n    'heavy freezing rain', 'light freezing rain'];\r\n    const dustyConditions = ['diamond dust', 'mist', 'duststorm'];\r\n    const lightningConditions = ['lightning without thunder', 'thunderstorm without precipitation'];\r\n\r\n\r\nfunction WeatherIcon(props) {\r\n    //Split in case there are two condition in one day, always show first\r\n    var str = props.conditions.split(', ')\r\n    var condition = str[0].toLowerCase();\r\n    const imgSize = props.imgSize;\r\n    const imgColor = 'white'; //props.imgColor\r\n    if (sunnyConditions.includes(condition)) {\r\n        return <icons.WiDaySunny size={imgSize} color={imgColor} />;\r\n    }\r\n    if (drizzleConditions.includes(condition)) {\r\n        return <icons.WiRainMix size={imgSize} color={imgColor} />;\r\n    }\r\n    if (snowConditions.includes(condition)) {\r\n        return <icons.WiSnow size={imgSize} color={imgColor} />;\r\n    }\r\n    if (sleetConditions.includes(condition)) {\r\n        return <icons.WiSleet size={imgSize} color={imgColor} />;\r\n    }\r\n    if (fogConditions.includes(condition)) {\r\n        return <icons.WiFog size={imgSize} color={imgColor} />;\r\n    }\r\n    if (hailConditions.includes(condition)) {\r\n        return <icons.WiHail size={imgSize} color={imgColor} />;\r\n    }\r\n    if (rainyConditions.includes(condition)) {\r\n        return <icons.WiRain size={imgSize} color={imgColor} />;\r\n    }\r\n    if (dustyConditions.includes(condition)) {\r\n        return <icons.WiDust size={imgSize} color={imgColor} />;\r\n    }\r\n    if (lightningConditions.includes(condition)) {\r\n        return <icons.WiLightning size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'thunderstorm') {\r\n        return <icons.WiThunderstorm size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'partially cloudy') {\r\n        return <icons.WiDayCloudy size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'overcast') {\r\n        return <icons.WiCloudy size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'ice') {\r\n        return <icons.WiSnowflakeCold size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'funnel cloud/tornado') {\r\n        return <icons.WiTornado size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'smoke or haze') {\r\n        return <icons.WiSmoke size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'squalls') {\r\n        return <icons.WiCloudyWindy size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'sky coverage decreasing') {\r\n        return <icons.WiCloudDown size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'sky coverage increasing') {\r\n        return <icons.WiCloudUp size={imgSize} color={imgColor} />;\r\n    }\r\n    if (condition === 'sky unchanged') {\r\n        return <icons.WiCloudRefresh size={imgSize} color={imgColor} />;\r\n    }\r\n    return <icons.WiDaySunny size={imgSize} color={imgColor} />;\r\n}\r\n\r\nexport default WeatherIcon;\r\n","import './weather.css';\r\nimport WeatherIcon from './weatherIcon';\r\nimport {useRef} from 'react';\r\n\r\nconst monthList = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n\r\nfunction Weather(props) {\r\n    var dateTime = new Date(props.dateTime);\r\n    \r\n    const date = dateTime.getDate();\r\n    const month = monthList[dateTime.getMonth()]\r\n    const fadeInCard = {\r\n        animationName: 'fadeInOpacity',\r\n        animationDelay: props.delay,\r\n        animationDuration: '1s',\r\n        animationFillMode: 'forwards'\r\n    }\r\n\r\n    const myRef = useRef(null);\r\n\r\n    const handleOnClick = () => {\r\n        props.handleSetToggledItem(props.index);\r\n        myRef.current.scrollIntoView({'behavior': 'smooth', \"inline\": \"center\"});\r\n    }\r\n    \r\n    if (props.toggleItem === props.index) {\r\n        var focused = 'focused card';\r\n    } else {\r\n        focused = 'card'\r\n    }\r\n\r\n    return (\r\n        <div ref={myRef} style={fadeInCard} className={focused} onClick={handleOnClick}>\r\n            <WeatherIcon\r\n                conditions={props.conditions}\r\n                imgSize={64}\r\n                imgColor={'black'}\r\n            />\r\n            <h2>{date}</h2>\r\n            <h3>{month}</h3>\r\n            <p className='temp'>{props.temp}&deg;</p>\r\n            <p className='tempMin'>{props.tempMin}&deg;</p>\r\n            <p className='tempMax'>{props.tempMax}&deg;</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import './weatherInfo.css';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer, Legend } from 'recharts';\r\n\r\nfunction WeatherInfo(props) {\r\n\r\n    let array = props.hours.filter((i,j) => j % 2 === 0);\r\n\r\n    const CustomToolTip = ({ active, payload, label }) => {\r\n        if (active && payload && payload.length) {\r\n          return (\r\n            <div className=\"custom-tooltip\">\r\n                <p className='label'>{label}</p>\r\n                <p>Temperature: {payload[0].value}&#8451;</p>\r\n                <p>Wind: {payload[1].value} km/h</p>\r\n                <p>Precipitation: {payload[2].value}%</p>\r\n            </div>\r\n          );\r\n        }\r\n      \r\n        return null;\r\n      };\r\n    return (\r\n        <div className='weatherInfo'>\r\n            <ResponsiveContainer width='100%' height='80%'>\r\n                <LineChart data={array}>\r\n                    <Line name='Temperature' type=\"monotone\" dataKey=\"temp\" stroke=\"orange\" />\r\n                    <Line name='Wind Speed' type=\"monotone\" dataKey=\"windspeed\" stroke=\"#03e5b7\" />\r\n                    <Line name='Precipitation Probability' type=\"monotone\" dataKey=\"precipprob\" stroke=\"#037ade\" />\r\n                    <CartesianGrid stroke=\"#ccc\" />\r\n                    <XAxis dataKey=\"datetime\" stroke='#ccc'/>\r\n                    <YAxis stroke='#ccc'/>\r\n                    <Tooltip content={CustomToolTip}/>\r\n                    <Legend verticalAlign=\"bottom\" height={36}/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInfo;","export default __webpack_public_path__ + \"static/media/ReactWeatherIcon.b0a87d89.png\";","import React, {useState} from 'react';\nimport './App.css';\n\nimport Weather from './components/weather/weather';\nimport WeatherInfo from './components/weather/weatherInfo';\nimport Logo from './assets/ReactWeatherIcon.png';\nimport axios from 'axios';\n\n\nrequire('dotenv').config()\nconst {REACT_APP_OWM_KEY} = process.env;\n\nfunction App() {\n  const [inputClass, setInputClass] = useState('searchCountry')\n  const [logoClass, setLogoClass] = useState('mainLogo')\n  const [error, setError] = useState(false);\n  const [weatherData, setWeatherData] = useState([])\n  const [toggledItem, setToggledItem] = useState(0);\n\n  const handleSetLocation = (e) => {\n    e.preventDefault()\n    \n    axios.get(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${e.target.country.value}?unitGroup=metric&key=${REACT_APP_OWM_KEY}&contentType=json`)\n      .then(res => {\n        const data = res.data;\n        setWeatherData(data.days)\n        setInputClass('searchCountry moveOnSubmit') //Apply animation to move search bar to top of page\n        setLogoClass('mainLogo miniLogo') //Apply animation to move logo to top of page\n      }).catch((error) => {\n        // Error\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.log(error.response.data);\n            console.log(error.response.status);\n            console.log(error.response.headers);\n            setError(true) //Show input error\n            setTimeout(() => {setError(false)}, 5000);\n        } else if (error.request) {\n            //no response from server\n            console.log(error.request);\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', error.message);\n        }})\n  }\n\n  const handleSetToggledItem = (index) => {\n    setToggledItem(index);\n  }\n\n\n  return (\n    <div>\n        <div className='flexContainer'>\n          {\n            weatherData.length > 0 && (weatherData.map((weather, index) => {\n              return (\n                  <Weather\n                    key={index}\n                    index={index}\n                    toggleItem={toggledItem}\n                    conditions={weather.conditions}\n                    dateTime={weather.datetime}\n                    temp={weather.temp}\n                    tempMax={weather.tempmax}\n                    tempMin={weather.tempmin}\n                    handleSetToggledItem={handleSetToggledItem}\n                    delay={`${index / 6}s`}\n                    />\n                )\n            }))\n          }\n          \n          \n        \n        </div>\n        {weatherData.length > 0 && <WeatherInfo hours={weatherData[toggledItem].hours}/>}\n        \n      \n        <img className={logoClass} src={Logo} alt='React Weather'/>\n        <form onSubmit={handleSetLocation}>\n          <div className={inputClass}>\n            <input id='countryInput' name='country' type='text' className='locationInput' autoFocus autoComplete='off'/>\n            {error && <p style={{color: 'red'}}>*Please enter a valid location</p>}\n          </div>\n        </form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}